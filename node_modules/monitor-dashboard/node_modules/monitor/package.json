{
  "name": "monitor",
  "description": "Runtime monitoring for node.js applications",
  "version": "0.6.10",
  "main": "./lib/index.js",
  "author": {
    "name": "Loren West",
    "email": "open_source@lorenwest.com",
    "url": "https://github.com/lorenwest"
  },
  "homepage": "http://lorenwest.github.com/node-monitor/",
  "keywords": [
    "monitor",
    "node-monitor",
    "remote control",
    "realtime",
    "probe",
    "JMX"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/lorenwest/node-monitor.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/lorenwest/node-monitor/blob/master/LICENSE"
    }
  ],
  "dependencies": {
    "config": ">=0.4.34 <0.5.0",
    "cron": ">=0.1.3 <0.2.0",
    "backbone": "0.9.9",
    "underscore": ">=1.4.3 <1.5.0",
    "backbone-callbacks": ">=0.1.4 <0.2.0",
    "socket.io-client": ">=0.9.11 <0.10.0",
    "socket.io": ">=0.9.10 <0.10.0"
  },
  "devDependencies": {
    "grunt": "0.3.17"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "grunt test",
    "start": "node monitor"
  },
  "readme": "Monitor your Node.js application\n================================\n\n[![Build Status](https://secure.travis-ci.org/lorenwest/node-monitor.png?branch=master)](https://travis-ci.org/lorenwest/node-monitor)\n\nIntroduction\n------------\n\nNode-monitor is a library for remote monitoring and control of your Node.js app servers.\n\nLike JMX in the Java world, node-monitor comes with a handful of general monitors, and allows you to create custom monitors for your application.\n\nThese monitors can be scripted using JavaScript, or placed onto a dashboard.\n\nProject Guidelines\n------------------\n\n* *Simple* - Get started quickly\n* *Powerful* - For multi-node enterprise deployment\n* *Lightweight* - Inactive until used, small footprint during use \n* *Flexible* - Easy to write custom monitors for your app\n* *Stable* - Well tested foundation for module developers\n\n\nGetting Started\n---------------\n\nRun the following from your app server directory\n\n    $ npm install monitor\n\nThen place the following line in your application bootstrap, and restart your server\n\n    require('monitor').start();\n\nMonitoring your app with a REPL console\n---------------------------------------\n\nAd-hoc monitoring can be done from a REPL console.  \n\nStart up the REPL, and get the Monitor class.  Feel free to copy/paste these lines into your console:\n\n    $ node\n    > var Monitor = require('monitor');\n    undefined\n\nNow connect a monitor to a probe on your app server.  There are a handful of built-in probes, and you can build custom probes for your application or npm module.  \n\nFor this example, we'll monitor the *Process* probe:\n\n    > var processMonitor = new Monitor({probeClass:'Process'});\n    > processMonitor.connect();\n\nThe monitor is a [Backbone.js](http://backbonejs.org/) data model so it updates in real time, and you can get all fields with toJSON():\n\n    > processMonitor.get('freemem');\n    86368256\n    > processMonitor.get('freemem');\n    80044032\n    > processMonitor.toJSON();\n    ...\n\nAs the monitor changes, it emits change events:\n\n    > processMonitor.on('change', function() {\n    ... console.log(processMonitor.get('freemem'));\n    ... });\n \nMonitoring your app with a custom script\n----------------------------------------\n\nUsing Node.js as a scripting language, you can write custom monitors that do anything Node.js can do.  Here's an example that prints to the console when free memory falls below a threshold.\n\nSave this file to low-memory-warn.js, and run **node low-memory-warn**\n\n    // Low memory warning monitor\n    var Monitor = require('monitor');\n    var LOW_MEMORY_THRESHOLD = 100000000;\n\n    // Set the probe to push changes every 10 seconds\n    var options = {\n      hostName: 'localhost',\n      probeClass: 'Process',\n      initParams: {\n        pollInterval: 10000\n      }\n    }\n    var processMonitor = new Monitor(options);\n\n    // Attach the change listener\n    processMonitor.on('change', function() {\n      var freemem = processMonitor.get('freemem');\n      if (freemem < LOW_MEMORY_THRESHOLD) {\n        console.log('Low memory warning: ' + freemem);\n      }\n    });\n\n    // Now connect the monitor\n    processMonitor.connect(function(error) {\n      if (error) {\n        console.error('Error connecting with the process probe: ', error);\n        process.exit(1);\n      }\n    });\n\nMonitoring your app in a browser\n--------------------------------\n\nThe above script runs just as well within an html ```<script>``` tag as on the server.  For example, change the ```var Monitor = require('monitor');``` line to something like this:\n\n    <script src=\"/path/to/monitor/dist/monitor-all.min.js\"></script>\n\nThe browser distribution included in node-monitor exports a single variable ```Monitor``` to the global namespace, and it can be used just like the ```Monitor``` variable in ```var Monitor = require('monitor')```.\n\nYour browser will probably have to be pointing to localhost or behind your firewall in order to connect with the app server on the configured monitor port.  See *Security Concerns* below.\n\nMonitoring your app in a dashboard \n---------------------------\n![Monitor-Dashboard](http://lorenwest.github.io/monitor-dashboard/img/cpu-gauge.png)\n\nThe [monitor-dashboard](https://github.com/lorenwest/monitor-dashboard) application lets you visualize your monitors in a dashboard.\n\n    $ npm install monitor-dashboard\n    $ npm start monitor-dashboard\n\nSecurity Concerns\n-----------------\n\nExposing the internals of your app server is a high security risk.  By default, the server listens on port 42000 and will connect with localhost clients only.\n\nIn order to monitor across machines, the default configuration must be changed to listen beyond localhost.  Before doing this, it is recommended to understand the risks and have external measures in place to prevent unauthorized access.\n\nSee notes in the ```config/external.js``` file for more information.\n\nLinks\n-------\n\n* [API Docs](http://lorenwest.github.io/node-monitor/doc/index.html) - Node monitor JavaScript documentation.\n* [Monitor Dashboard](https://github.com/lorenwest/monitor-dashboard) - Dashboards for the node monitor project.\n* [Dashboard Components](https://github.com/lorenwest/core-monitor) - Core components for the Dashboard project.\n\nLicense\n-------\n\nMay be freely distributed under the MIT license<br>\nSee the [LICENSE](https://github.com/lorenwest/node-monitor/blob/master/LICENSE) file.<br>\nCopyright (c) 2010-2014 Loren West<br>\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lorenwest/node-monitor/issues"
  },
  "_id": "monitor@0.6.10",
  "_shasum": "c417100bf9dda876dc4146a12c5e852bd8ee08dc",
  "_from": "monitor@>=0.6.3 <0.7.0",
  "_resolved": "https://registry.npmjs.org/monitor/-/monitor-0.6.10.tgz"
}
