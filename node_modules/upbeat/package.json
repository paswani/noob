{
  "name": "upbeat",
  "description": "Fast health and performance monitoring with process handling",
  "keywords": [
    "javascript",
    "performance",
    "health",
    "monitoring",
    "monit",
    "haproxy",
    "forever",
    "process",
    "systems"
  ],
  "author": {
    "name": "Jeff Su",
    "email": "me@jeffsu.com"
  },
  "version": "0.2.3-pre13",
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.5.0"
  },
  "directories": {
    "lib": "./lib/upbeat"
  },
  "main": "./lib/upbeat/index",
  "bin": {
    "upbeat": "./bin/upbeat"
  },
  "dependencies": {
    "express": ">=3.3.4",
    "jade": ">=0.32.0",
    "mochiscript": ">=0.6.16",
    "js-yaml": ">=2.1.0",
    "tempo": ">=0.2.7",
    "winston": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jeffsu/upbeat.git"
  },
  "readme": "#Upbeat\n\nProcess monitoring with scalable health/performance checking.\n\nUpbeat provides several useful features:\n\n##Complex healthcheck strategies\n\nFor accurate healthchecks, sometimes the likes of monit, nagios and/or haproxy is not enough.  An example\nwould be testing a mysql server to see if 1) the process is running 2) a query works 3) how fast the query was\nThis is just and example of what upbeat is meant to do.  It is not meant to replace the tools mentioned previously, \nbut to actually play nicely with them.\n\n##Fast and scalable remote health checking\n\nUpbeat leverages nodes quickness and allows service healthchecks to be temporarily cached allowing more throughout put \nin your healthchecks.  This will enable every machine to know the status of every other machine in a cluster without doing\nan expotential number of \"real\" healthchecks.  In the context of cloud computing, where high throughput load balancing is \nnon-trivial this becomes very useful.\n\n##Web Dashboard##\n\nSee your statuses on one page or use them for scripting through an api.\n\n##Forever Integration##\n\nDefine processes to be run and how to monitor them.\n\n#Documentation\n\n- [Installation](#installation)\n- [Sample Config](#sample)\n- [Dashboard](#dashboard)\n- [Configuration](#configuration)\n  - [Using Forever Process Monitoring](#forever)\n  - [Services](#services)\n  - [Actions](#actions)\n- [Strategies](#strategies)\n  - [process](#process)\n  - [upbeat](#upbeat)\n  - [tcp](#tcp)\n  - [http](#http)\n  - [redis](#redis)\n  - [mysql](#mysql)\n  - [oauth request](#oauth)\n- [api](#api)\n\n<a name=\"installation\" />\n##Installation\n\nAssuming you have node and npm installed, run:\n\n    npm-g install upbeat\n    upbeat ./my/upbeat-config.yml\n\nNow an http server will be running that you can query for health statuses\n\n<a name=\"sample\" />\n##Example Config File:\n\n    port: 2468\n    host: 127.0.0.1\n\n    services:\n      rails-process:\n        - strategy: mysql\n          socket: /tmp/mysql.sock\n        - strategy: process\n          pidfile: /tmp/rails.pid\n        - strategy: http\n          url: http://localhost:3000/\n        - strategy: http\n          port: 3000\n          host: 127.0.0.1\n          interval: 3000\n          timeout:  1000\n\n      factual-api:\n        - name: places\n          strategy: http\n          url: http://api.v3.factual.com/t/places\n          get:\n            KEY: <my key>\n            q:   starbucks \n\n      google.com:\n        - name: homepage\n          url: http://www.google.com\n          strategy: http\n\n      redis:\n        - strategy: redis\n          port: 6537\n          host: 127.0.0.1\n\n      mysql:\n        - strategy: mysql\n          socket: /tmp/mysql.sock\n\n<a name=\"dashboard\" />\n##Web Dashboard:\n\n  * http://localhost:2468/ - dashboard\n  * http://localhost:2468/health - health check returns 200 \n  * http://localhost:2468/services/factual-api \n  * http://localhost:2468/services/factual-api/health\n  * http://localhost:2468/services/google.com\n  * http://localhost:2468/services/google.com/health\n  * http://localhost:2468/services/redis\n  * http://localhost:2468/services/redis/health\n\n<a name=\"configuration\" />\n##Configuration:\n\nUpbeat uses YAML for configuration.  There are several concepts to take note of when \nrunning configuring upbeat: server, services, actions and strategies\n\n<a name=\"global\" />\n###Global Server Configuration:\n\nIn the top level of the yaml configuration you have 4 main categories:\n\n  * webapp: parameters for the ui\n  * logging: parameters for logging\n  * processes: parameters for using forever\n  * services: a key/value hash where the key is the name of the service and the value is an array of action definitions\n\n<a name=\"webapp\" />\n###Web Application (UI)\n\nTo disable the UI altogether:\n\n    webapp: false\n\nTo run the web app on a particular port:\n\n    webapp: \n      port: 2468\n      address: 127.0.0.1\n\nBy default, the webapp is enabled and runs on port 2468\n\n\n<a name=\"forever\" />\n###Forever:\n\nYou can integrate forever by using the \"processes\" keyword in your config.\n\n    processes:\n      NodeServer:\n        command: \"/usr/local/bin/node\"\n        options: [ \"server.js\" ]\n        checks:\n          - strategy: http\n            url: http://localhost:1337\n            status: 200\n            interval: 3000\n          - strategy: http\n            url: http://localhost:1337/hello\n            status: 200\n            interval: 3000\n\n<a name=\"services\" />\n###Services:\n\nThe services section in the global configuration has to be a hash where the key is \nthe name of the service and the value is an array of \"actions\" for the service to check.\n\n<a name=\"actions\" />\n###Actions:\n\nActions are a hash that have one required field: strategy. Stragety is used to tell upbeat\nhow to test a particular service.  Every action has these fields available to it:\n\n**optional fields**\n  \n  * rise: number of times action has to pass before action can be upgraded from \"down\" to \"up\"\n  * fall: number of times action has to fail before action can be downgraded from \"up\" to \"down\"\n  * interval (in millisecondes): time between passed or failed checks (default depends on the strategy) \n  * timeout (in milliseconds): time allowed for the request to pass otherwise, its canceled and marked as failed (defaults depends on the strategy)\n  * max-response-time: similar to timeout. If an action returns before timeout but is greater than max-response-time, it will still count as a failure\n  * name: vanity name for the action used in reports\n\n<a name=\"strategies\" />\n##Strategies\n\n<a name=\"process\" />\n**process**\n\nChecks to see if a process is running via pidfile:\n\n  * pidfile: file with the pid written in it\n\nExample:\n    \n    services:\n      my-process:\n        - pidfile: /tmp/my.pid\n          strategy: process\n\n<a name=\"http\" />\n**http**\n\nThe http strategy will send a request to the server. Fields:\n\n  * url: The url of the request to use\n  * post or put: hash of key/value pairs to use as the data of the request\n  * get: hash of key/value parise to use as the query string\n  * timeout: defaults to 10000\n  * interval: defaults to 10000\n  * matches: (array or string) regular expression to test against the returned http payload. \n  * lambda: (array or string) a function that should return a boolean (if its matches is not enough)\n  * headers: Hash of headers to be used\n\nExample:\n\n    services:\n      http-actions:\n        - url: http://www.google.com\n          strategy: http\n          matches: html\n          lambda: \"function (data) { return data.match(/html/); }\"\n\n        - name: test-google\n          url: http://www.google.com\n          strategy: http\n          headers:\n            Host: www.google.info\n\n        - name: test-search\n          url: http://www.google.com\n          strategy: http\n          get:\n            q: upbeat\n\n        - name: test-google\n          strategy: http\n          url: http://www.google.com\n          rise: 3\n          fall: 1\n\n<a name=\"upbeat\" />\n**upbeat**\n\nYes, upbeat can monitor other upbeat servers. Fields:\n\n  * port: port of upbeat server to monitor\n  * host: host of upbeat server to monitor\n  * timeout: defaults to 5000\n  * interval: defaults to 5000\n\nExample:\n\n    port: 2467\n    services:\n      upbeat:\n        - strategy: upbeat\n\n<a name=\"tcp\" />\n**tcp**\n\nStrategy to check if a connection to a port can be established. Fields:\n \n  * port: port of service\n  * host: host of service\n  * timeout: defaults to 2000\n  * interval: defaults to 3000\n\n<a name=\"mysql\" />\n**mysql**\n\nThe mysql strategy will connect to a mysql server and perform a query. Fields:\n\n  * sql: sql to send - defaults to \"SHOW DATABASES LIMIT 1\"\n  * database: selects database to use - defaults to \"MYSQL\"\n\nconnecting - either use the socket field or:\n\n  * host: defaults to '127.0.0.1'\n  * port: defaults to 3306\n  * user\n  * password\n  * timeout: defaults to 5000\n  * interval: defaults to 10000\n \nExample:\n  \n    services:\n      mysql:\n        - strategy: mysql\n          socket: /tmp/mysql.sock\n\n<a name=\"redis\" />\n**redis**\n\nThe redis strategy will connect to a redis server and issue an \"ECHO hello\" command. Fields:\n\n  * host: host of redis server\n  * port: port of redis server\n  * timeout: defaults to 2000\n  * interval: defaults to 10000\n \nExample:\n  \n    services:\n      redis:\n        - host: 127.0.0.1\n          port: 6537\n          strategy: redis\n\n<a name=\"oauth\" />\n**oauth**\n\nUpbeat supports basic OAuth get requests. Fields:\n\n  * url\n  * key: oauth key\n  * secret: oauth secret\n\nExample:\n\n    services:\n      oauth:\n        - strategy: oauth\n          url: http://api.v3.factual.com/t/places\n          key: \"My Key\"\n          secret: \"My Secret\"\n            \n\nCustom Strategies\n-----------------\n\nIts pretty simple to register a custom strategy.  There are 3 things the object needs to have:\n\n  1. an instantiator where the only paramater is a config hash (action)\n  1. check(callback): the callback is function that expects a boolean\n  1. clear(): a function that should halt any asynchronus activity\n\nExample:   \n\n    var AlwaysPass = function (config) { this.config };\n    AlwaysPass.prototype.check = function (callback) {\n      callback(true);\n    };\n\n    AlwaysPass.prototype.clear = function () { \n      // no op\n    };\n\n    require('./upbeat').registerCallback('always-pass', AlwaysPass);\n\nConfig file\n\n    services:\n      myservice:\n        - strategy: \"/home/me/my-strategy.js\"\n          key0: val0\n          key1: val1\n\n# Logging\n\nAll logging is optional, but here are some parameters you can use:\n\n    logging:\n      console: false # defaults to true\n      files:\n        - /var/log/upbeat.log\n        - file: /var/log/upbeat.errors.log\n          level: error\n\nIf you want to build your own listeners to upbeat, please follow lib/upbeat/logger.ms for an example.\nYou can also look at bin/upbeat for an example of how to instantiate an upbeat server via config file.\n\n    var c = new upbeat.Configurer(<config object>);\n    c.server.on('change', function (service) { console.log('something changed') });\n    c.start();\n\n<a name=\"api\" />\n# API\n\nUsing configurer to instantiate your server.\n\n    var config = ... json config ...;\n    var configurer = new upbeat.Configurer(config);\n    configurer.start();\n\n## Configurer\n\nThe configurer has 3 main members:\n\n  1. server\n  1. logger\n  1. webapp\n\n### Server\n\nThe upbeat server is the object that does all the health checking and process management.\n\n#### Events\n\n*up* \n\nEvery time a service comes up.\n\n*down*\n\nEvery time a service goes down.\n\n*change*\n\nEvery time a services changes status.\n\n*snapshot*\n\nEvery time a service gets snapshotted\n\n### Logger\n\nA container for a winston object and is a proxy for a lot of the server events.\n\n### WebApp\n\nA container for an express application.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jeffsu/upbeat/issues"
  },
  "homepage": "https://github.com/jeffsu/upbeat",
  "_id": "upbeat@0.2.3-pre13",
  "_shasum": "e1fd444776fb12e97e7f2e9345f3932f27fbfe0f",
  "_from": "upbeat@",
  "_resolved": "https://registry.npmjs.org/upbeat/-/upbeat-0.2.3-pre13.tgz"
}
