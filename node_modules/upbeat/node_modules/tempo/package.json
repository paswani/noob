{
  "name": "tempo",
  "description": "Rotating Counters for Nodejs",
  "keywords": [
    "javascript",
    "language",
    "mochiscript",
    "counter",
    "stats"
  ],
  "author": {
    "name": "Jeff Su"
  },
  "version": "0.2.7",
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "engines": {
    "node": ">=0.4.0"
  },
  "directories": {
    "lib": "./lib/tempo"
  },
  "main": "./index.js",
  "bin": {},
  "scripts": {
    "test": "node tests"
  },
  "dependencies": {
    "mochiscript": ">=0.6.15"
  },
  "devDependencies": {
    "cli-table": ">=0.0.2",
    "nodeunit": "~0.7.4",
    "redis": "~0.8.1",
    "async": "~0.1.22"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jeffsu/tempo.git"
  },
  "readme": "# Tempo\n\nScalable time-based counters that meant logging, graphing and providing a realtime statistics. All features in tempo are meant to have a constant size memory footprint defined by configuration.\n\nFor a quick example, please look at examples/simple-use-case.js\n\n# Features\n\n  1. simple counters that sync over redis using a hash structure\n  1. counters that keep track of historical data in buckets\n  1. syncing with redis for aggregation on multiple servers\n  1. throttling\n\n\n# Use Case\n\nLets say you are running a website and want to know in realtime where people are visiting.\n\n```javascript\n\n  var redis = require('redis').createClient();\n  var tempo = require('tempo');\n\n  // create middleware to track counts\n  // create time counter, increment and sync\n  var min = tempo.min();\n\n  app.use(function (req, res, next) {\n    // the '1' is unnecessary because increment defaults to '1'\n    min.inc('requests', 1); \n    if (min.getCount('requests') > 1000) return next('throttled');\n    next();\n  })\n\n  function showTotalRequestsInPastMin() {\n    min.getKeys().forEach(function (k) { console.log(k, min.getCount(k)) });\n  }\n\n  function showRequestsOverTime() {\n    min.eachCount('requests', function (count, time) {\n      console.log(\"Requsts at \" + (new Date(time)).toString() + ': ' + count); \n    });\n\n    console.log(tempo.getCount('requests') + ' request(s) made in the last minute'); \n  }\n\n```\n\n# Counter\n\nThe tempo TimedCounter class allows you to create a datastore object and keep\ndata in memory.\n\n## Instance methods\n\n### var counter = new tempo.Counter(options)\n\n  1. options hash\n    1. per: milliseconds per bucket\n    1. buckets: number of buckets\n    1. timeout (optional): Time to live. Mainly for redis syncing. Defaults to (per*bucket)+per*2\n\nExample for keeping data up to an hour of history:\n\n```javascript\nvar tempo = require('tempo');\nvar ds = new tempo.TimedCounter({ per: 60000, buckets: 60 });\n```\n\n### counter.inc(key, [n]); O(1)\n\n  1. key: entity name\n  1. n (optional, defaults to 1): a number to increment by.\n\nKeeping track of how many times a user has logged in in the past hour:\n```javascript\n  var ds = require('tempo').hour();\n  ds.inc(userId);\n```\n\n### counter.getHistory(key); O(n)\n\n   1. key: entity name\n\nGrabbing logged in counts:\n\n```javascript\n  var history = ds.getHistory(userId);\n```\n\nReturns an array of counts (per bucket)\n\n\n### counter.sync([callback]) O(nb)\n\n  1. redis client  \n  1. prefix/namespace for the key to store in redis\n    * tempo's keys will look something like \"<namespace>:<timestamp>\"\n  1. O(nt) where n is the number of keys and b is the number of buckets\n\n```javascript\n  counter.sync(redis, 'web-stats', callback);\n```\n\n### counter.getKeys(); O(nb)\n\nreturns and array of all the keys in the counter\nO(nt) where n is the number of keys and b is the number of buckets\n\n### counter.eachCount(key1, key2, ... [ callback ])\n\nRuns a callback against every bucket in the counter with arguments (see examples below):\n\n```\ncounter.eachCount('key1', 'key2', function (keyCount1, keyCount2, time) {\n  console.log('key1', keyCount1, ' at ' + (new Date(time)).toString());\n  console.log('key2', keyCount2, ' at ' + (new Date(time)).toString());\n});\n\n\n# Syncer\n\n```javascript\nvar tempo = require('tempo');\nvar syncer = new tempo.Syncer(redisClient);\n```\n\n## Instance methods\n\n### syncer.addCounter(counter);\n\nAdds a counter to the list of counters to sync at once\n\n### var counter = syncer.counter(options)\n\nShortcut to instantiate counter and add it\n\n### syncer.sync([ callback ])\n\nSyncs all counters to redis (push and pull)\n\n### syner.push([ callback ])\n\nPushes data  to redis\n\n### syncer.pull([ callback ])\n\nPulls data from redis\n\n### syncer.start(type, interval)\n\nStarts running a type of sync at given intervals between syncs\n\n```javascript\nsyncer.start('push', 3000) // push to redis every 3 seconds\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jeffsu/tempo/issues"
  },
  "homepage": "https://github.com/jeffsu/tempo",
  "_id": "tempo@0.2.7",
  "_shasum": "7c81597238ea9856ac3277d69a8e02ebc3f88f44",
  "_from": "tempo@>=0.2.7",
  "_resolved": "https://registry.npmjs.org/tempo/-/tempo-0.2.7.tgz"
}
