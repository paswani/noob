{
  "name": "ts-compiler",
  "version": "1.1.0",
  "description": "TypeScript compilation via the typescript-api",
  "main": "tsc.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jedmao/ts-compiler.git"
  },
  "keywords": [
    "typescript",
    "compiler",
    "language",
    "microsoft"
  ],
  "author": {
    "name": "Jed Mao",
    "email": "jed.hunsaker+npm@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jedmao/ts-compiler/issues"
  },
  "homepage": "https://github.com/jedmao/ts-compiler",
  "dependencies": {
    "typescript": "~0.9.7",
    "typescript-api": "~0.9.7"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "grunt": "~0.4.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.9.0",
    "grunt-typescript": "~0.2.7",
    "mocha": "~1.17.0",
    "sinon": "~1.8.2",
    "sinon-chai": "~2.5.0"
  },
  "engines": {
    "node": ">=0.10.24"
  },
  "readme": "# ts-compiler\n\n> TypeScript compilation via the [typescript-api][].\n\nThis version is compatable with TypeScript 0.9.7.\n\n[![Build Status][]](http://travis-ci.org/jedmao/ts-compiler)\n[![Dependency Status][]](https://gemnasium.com/jedmao/ts-compiler)\n[![NPM version][]](http://badge.fury.io/js/ts-compiler)\n[![Views][]](https://sourcegraph.com/github.com/jedmao/ts-compiler)\n\n[![NPM][]](https://nodei.co/npm/ts-compiler/)\n\n\n## TypeScript Usage\n\n```ts\n/// <reference path=\"node_modules/ts-compiler/ts-compiler.d.ts\" />\nimport ts = require('ts-compiler');\n\nts.compile(\n  ['foo.ts', 'bar.ts'],\n  { skipWrite: true },\n  (err: Error, results: ts.OutputFile[]) => {\n\n    var foo = results[0];\n    console.log(foo.text);\n\n    var bar = results[1];\n    console.log(bar.text);\n  });\n```\n\n\n## JavaScript Usage\n\n```js\nvar ts = require('ts-compiler');\n\nts.compile(\n  ['foo.ts', 'bar.ts'],\n  { skipWrite: true },\n  function(err, results) {\n\n    var foo = results[0];\n    console.log(foo.text);\n\n    var bar = results[1];\n    console.log(bar.text);\n});\n```\n\n\n## Module API\n\n\n### ts.compile(files: string[], options?: ICompilerOptions, callback?: Function): BatchCompiler\n\n- This is a shorthand way to call `new ts.BatchCompiler.compile(...)`\n- Callback signature is err: Error, results: [ts.OutputFile](#tsoutputfile) Array.\n- The options follow the [ICompilerOptions interface](#tsicompileroptions).\n- Emits `error` and `info` events.\n\n\n### ts.OutputFile\n\n- name: string\n- writeByteOrderMark: boolean\n- text: string\n- fileType: (0: JavaScript, 1: SourceMap, 2: Declaration)\n- sourceMapEntries: SourceMapEntry[]\n\n\n### ts.ICompilerOptions\n\nThough all natively supported TypeScript compiler options will be passed through to the real compiler, it might not always make sense from an API standpoint. Use with common sense.\n\n\n#### options.declaration\n- Type: `Boolean`\n- Default: `false`\n\nGenerates corresponding .d.ts file.\n\n#### options.mapRoot\n- Type: `String`\n\nSpecifies the location where debugger should locate map files instead of generated locations.\n\n#### options.module\n- Type: `String`\n\nSpecify module code generation: `commonjs` or `amd`\n\n#### options.noImplicitAny\n- Type: `Boolean`\n- Default: `false`\n\nWarn on expressions and declarations with an implied `any` type.\n\n#### options.noResolve\n- Type: `Boolean`\n- Default: `false`\n\nSkip resolution and preprocessing.\n\n#### options.out\n- Type: `String`\n\nConcatenate and emit output to single file.\n\n#### options.outDir\n- Type: `String`\n\nRedirect output structure to the directory.\n\n#### options.removeComments\n- Type: `Boolean`\n- Default: `false`\n\nDo not emit comments to output.\n\n#### options.sourcemap\n- Type: `Boolean`\n- Default: `false`\n\nGenerates corresponding .map file.\n\n#### options.sourceRoot\n- Type: `String`\n\nSpecifies the location where debugger should locate TypeScript files instead of source locations.\n\n#### options.target\n- Type: `String`\n- Default: `ES3`\n\nSpecify ECMAScript target version: 'ES3' or 'ES5'\n\n#### options.optionsFile\n- Type: `String`\n\nInsert command line options and files from a file. This is natively supported by the tsc command, but as a different @file key.\n\n#### skipWrite\n- Type: `Boolean`\n- Default: `false`\n\nSkips writing the output files. This flag is unique to ts-compiler.\n\n\n## License\n\nReleased under the MIT license.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/jedmao/ts-compiler/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n\n[typescript-api]: https://github.com/jedmao/typescript-api\n[Build Status]: https://secure.travis-ci.org/jedmao/ts-compiler.png?branch=master\n[Dependency Status]: https://gemnasium.com/jedmao/ts-compiler.png\n[NPM version]: https://badge.fury.io/js/ts-compiler.png\n[Views]: https://sourcegraph.com/api/repos/github.com/jedmao/ts-compiler/counters/views-24h.png\n[NPM]: https://nodei.co/npm/ts-compiler.png?downloads=true\n",
  "readmeFilename": "README.md",
  "_id": "ts-compiler@1.1.0",
  "_shasum": "bdaa7da36db7304157ac2eb485b8163b8f2f7e32",
  "_from": "ts-compiler@~1.1.0",
  "_resolved": "https://registry.npmjs.org/ts-compiler/-/ts-compiler-1.1.0.tgz"
}
